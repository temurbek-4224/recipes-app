{"version":3,"sources":["Recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","image","calories","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAkBeA,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACxC,OACE,sBAAKC,UAAU,SAAf,UACE,6BAAKJ,IACL,6BACGG,EAAYE,KAAI,SAAAC,GAAU,OACzB,6BAAKA,EAAWC,YAGpB,4BAAIL,IACJ,qBAAKE,UAAU,QAAQI,IAAG,UAAKP,GAASQ,IAAI,SC4DnCC,EArEH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAUhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,uCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACE,sBAAKrB,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,wBACA,uBACEwB,SAVY,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAQNX,UAAU,cAFZ,UAIE,uBACEA,UAAU,aACV2B,KAAK,OACLC,MAAOlB,EACPmB,SAtBa,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAsBR,wBACEV,UAAU,gBACV2B,KAAK,SAFP,uBAOF,qBAAK3B,UAAU,UAAf,SAEIQ,EAAQP,KAAI,SAAA8B,GAAM,OAChB,cAAC,EAAD,CAEEnC,MAAOmC,EAAOA,OAAOC,MACrBlC,SAAUiC,EAAOA,OAAOjC,SACxBD,MAAOkC,EAAOA,OAAOlC,MACrBE,YAAagC,EAAOA,OAAOhC,aAJtBgC,EAAOA,OAAOC,gBChDlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.498c4e29.chunk.js","sourcesContent":["import React from 'react';\r\nimport './recipe.css';\r\n\r\nconst Recipe = ({ title, image, calories, ingredients }) => {\r\n  return (\r\n    <div className='recipe'>\r\n      <h1>{title}</h1>\r\n      <ol>\r\n        {ingredients.map(ingredient => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>{calories}</p>\r\n      <img className='image' src={`${image}`} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nconst App = () => {\n\n  const APP_ID = 'e72dc4ca';\n  const APP_KEY = '1904e21167a0d93707bafa80f39998c0\t';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className='App'>\n      <h1 className='title'>Recipe App</h1>\n      <form\n        onSubmit={getSearch}\n        className='search-form'\n      >\n        <input\n          className='search-bar'\n          type='text'\n          value={search}\n          onChange={updateSearch}\n        />\n        <button\n          className='search-button'\n          type='submit'\n        >\n          Search\n        </button>\n      </form>\n      <div className='recipes'>\n        {\n          recipes.map(recipe => (\n            <Recipe\n              key={recipe.recipe.label}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}